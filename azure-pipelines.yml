# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  name: Default
steps:
- bash: |
    export PYTHONUNBUFFERED=1
    echo $USER
    set +x
    stf --docker-image-dont-pull test --sch-server-url '$(DEV_SCH_URL)' --sch-username '$(DEV_SCH_USER)' --sch-password "$(DEV_SCH_PASSWORD)"  --pipeline_id "$(DEV_PIPELINE_ID)" --elasticsearch-url '$(DEV_ELASTICSEARCH_URL)' --cluster-server '$(DEV_KAFKA_URL)' --kafka-version 2.7.0 --kafka-zookeeper $(DEV_ZK_URL) -vv --upgrade-jobs --junit-xml=/root/tests/output/test-output.xml
    sudo chown -R azureuser:azureuser /home/azureuser/myagent
  displayName: 'Run Tests on Streamsets Pipeline'
- task: PublishTestResults@2
  condition: succeeded()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Kafka To ElasticSearch Streamsets Pipeline'
    failTaskOnFailedTests: true
- task: Bash@3
  condition: succeeded()
  inputs:
    targetType: 'inline'
    noRc: false
    script: echo $MYSECRET,$(QA_SCH_URL)
  env:
    MYSECRET: $Foo
- task: PythonScript@0
  inputs:
    scriptSource: inline
    script: |
      import sys
      print ('Executing script file is:', str(sys.argv[0]))
      print ('The arguments are:', str(sys.argv))
      import argparse
      parser = argparse.ArgumentParser()
      parser.add_argument("--world", help="Provide the name of the world to greet.")
      args = parser.parse_args()
      print ('Hello ', args.world)
    arguments: --world Venus
